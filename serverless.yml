service: boilerplate-lambda-kafka-go
frameworkVersion: "3"

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  logRetentionInDays: 7
  deploymentBucket:
    name: ${file(./environment/${self:provider.stage}.yml):deploymentBucket}
    serverSideEncryption: AES256
  versionFunctions: false
  environment:
    APP_ENV: ${file(./environment/${self:provider.stage}.yml):env}

functions:
  demo:
    handler: bootstrap
    package:
      individually: true
      artifact: bin/demo/bootstrap.zip
    events:
      - kafka:
          accessConfigurations:
            saslPlainAuth: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_AUTH_SECRET_ARN}
          topic: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_TOPIC}
          consumerGroupId: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_CONSUMER_GROUP_ID}
          bootstrapServers:
            - ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_BROKERS}
          batchSize: 1
          enabled: true
          startingPosition: LATEST
    environment:
      IS_SERVERLESS: true
      KAFKA_BROKERS: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_BROKERS}
      KAFKA_CLIENT_ID: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_CLIENT_ID}
      KAFKA_CONSUMER_GROUP_ID: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_CONSUMER_GROUP_ID}
      KAFKA_USERNAME: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_USERNAME}
      KAFKA_PASSWORD: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_PASSWORD}
      KAFKA_TOPIC: ${file(./environment/${self:provider.stage}.yml):ENV_KAFKA_TOPIC}

resources:
  Outputs:
    NewOutput:
      Value: ${self:service}-${self:provider.stage}
